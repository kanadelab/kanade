＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃
＃　　　「奏でる日常の音色」お茶会イベント
＃　　　里々での実装の手引き
＃
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃


＃
＃　このファイルは、「奏でる日常の音色」のゴースト連携イベント「お茶会」への対応のしかたを
＃　「里々」を使ったサンプルコードとともに、できるだけ分かりやすく説明しています。
＃
＃　より詳しい解説は、「TeaParty_Readme.txt」をご覧ください。
＃


＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃
＃　ステップ０
＃　お茶会イベントとは
＃
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃

＃
＃　お茶会イベントとは、「奏でる日常の音色」のゴースト連携イベントで、
＃　ゴースト同士で、お茶とお菓子を楽しもうという企画です。
＃
＃　毎週土曜日に、対応ゴーストを起動して機能の一覧からお茶会を選ぶとイベントが発生します。
＃


＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃
＃　ステップ１
＃　お茶会に対応するための設定を用意しましょう。
＃
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃

＃
＃　お茶会には「バージョン」という考え方があります。
＃　これは今後の更新でお茶会の内容を増やしても、対応していないゴーストさんが
＃　困らないようにするための仕組みです。
＃
＃　とりあえず今回は初期のバージョンである「バージョン１」に対応し、
＃　さらに知らないバージョンのお茶会にも無難に対応できる辞書を作っていきます。
＃

＃
＃　まずは単語として自分のバージョンを書いて置いておきましょう。
＃　バージョンは今回は「バージョン１」にだけ対応するので「1」です。
＃

＠お茶会バージョン
1

＃
＃　次に単語として、ゴーストのメインキャラクターの名前を書いておきます。
＃　これはゴーストのフォルダの「descript.txt」の「sakura.name,○○○○」の
＃　○の部分の名前を書きます。
＃　もし、「sakura.name,さち」と書いてあるなら、次のように書きます。
＃

＠メインキャラの名前
さち


＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃
＃　ステップ２
＃　お茶会に参加するために必要な、情報交換イベント
＃　「OnKanadeTeaPartyInfomationRequest」に対応しましょう。
＃
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃

＃
＃　ステップ１の設定を用意だけしておいたら、
＃　次は実際の「奏でる日常の音色」とのやりとりを作ります。
＃
＃　「奏でる日常の音色」はお茶会をはじめる前に、誰がどのバージョンまで対応しているかを
＃　知るために起動中のすべてのゴーストに「OnKanadeTeaPartyInfomationRequest」イベントを
＃　送信してきます。
＃

＃
＃　イベントの内容は、次のようになっています。
＃
＃　Reference0:「奏でる日常の音色」のお茶会バージョン番号
＃　Reference1:返信イベントの送信先ゴースト（「かなで」に固定）
＃　Reference2:返信イベント名
＃
＃　イベントを受け取った側は、お茶会に対応できるかどうかをチェックして
＃　「奏でる日常の音色」に伝えなければいけません。
＃
＃　まずは受け取った情報を保存して、情報をチェックするイベントに
＃　ジャンプするまで作っておきましょう。
＃

＊OnKanadeTeaPartyInfomationRequest
＄相手のお茶会バージョン	（Ｒ０）
＄相手の名前	（Ｒ１）
＄相手のイベント	（Ｒ２）
＞お茶会の情報交換

＃
＃　次に、「相手のお茶会バージョン」と自分のお茶会バージョンを比べて、
＃　対応しているかそうではないかを調べます。
＃　自分のお茶会バージョンが相手のお茶会バージョン以上なら、対応していると言えます。
＃

＊お茶会の情報交換
＞お茶会に対応している	（お茶会バージョン）>=（相手のお茶会バージョン）
＞お茶会に対応していない

＃
＃　これで対応しているかしていないかが分かりました。
＃　この情報を「奏でる日常の音色」に伝えます。
＃
＃　情報を伝えるにはさくらスクリプトの「\![raiseother,相手の名前,イベントの名前,r0,r1,r2]」を使います。
＃　「相手の名前」と「イベントの名前」はそれぞれ「OnKanadeTeaPartyInfomationRequest」で
＃　受け取った情報を使います。
＃　r0, r1, r2はそれぞれ次のように決まっています。
＃
＃　Reference0（r1）:クライアントの対応するお茶会バージョン番号
＃　Reference1（r1）:クライアントの\0(Sakura)名（descript.txtに設定したものを正確に）
＃　Reference2（r1）:「奏でる日常の音色」のお茶会バージョンに対する対応情報
＃
＃　r0には、クライアント、つまり自分のお茶会のバージョンを指定します。
＃　r1はステップ１で用意した自分のメインキャラクターの名前です。
＃　r2には「対応情報」というものを書きます。
＃
＃　対応情報は上の「＊お茶会の情報交換」で対応しているかどうかわかったので、
＃　対応している時は「対応」を書きます。
＃　対応していなかったときは、今回はがんばって対応することにするので、
＃　「自動対応」と書きます。
＃

＊お茶会に対応している
＄お茶会の対応情報	対応
＞お茶会の情報返信

＊お茶会に対応していない
＄お茶会の対応情報	自動対応
＞お茶会の情報返信

＃
＃　対応情報まで準備したら、「奏でる日常の音色」に送信です。
＃

＊お茶会の情報返信
：\![raiseother,（相手の名前）,（相手のイベント）,（お茶会バージョン）,（メインキャラの名前）,（お茶会の対応情報）]

＃
＃　これで自分の情報が「奏でる日常の音色」に伝わりました。
＃


＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃
＃　ステップ３
＃　お茶会でのトークをするために、
＃　「OnKanadeTeaParty」に対応しましょう。
＃
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃

＃
＃　いよいよお茶会の本体部分のトークを書いていきます。
＃　お茶会の内容は「OnKanadeTeaParty」イベントで送られてきます。
＃

＃
＃　このイベントの内容は、
＃　Reference0:Reference1以降の組み合わせが実装されたお茶会のバージョン
＃　Reference1:お飲み物
＃　Reference2:お菓子
＃　Reference3以降:拡張情報
＃
＃　このようになっています。
＃
＃　今回は「Reference3以降」は使いません。
＃　バージョン１のお茶会では「拡張情報」がないからです。
＃
＃	今回使う「Reference1」と「Reference2」のお茶とお菓子の名前の組みあわせは、
＃　バージョン１では次のどれかに決まっています。
＃
＃　「マカロン＋紅茶」
＃　「レアチーズケーキ＋紅茶」
＃　「イチゴショート＋紅茶」
＃　「アップルパイ＋紅茶」
＃　「クリスマスケーキ＋紅茶」
＃　「さくらもち＋緑茶」
＃　「わらびもち＋緑茶」
＃　「フレンチトースト＋コーヒー」
＃　「ドーナツ＋コーヒー」
＃　「クッキー＋コーヒー」
＃
＃　まずは、それぞれのお菓子についてのトークにイベントからジャンプさせましょう。
＃　さらにステップ２で「対応していなかったときは、今回はがんばって対応することにする」と
＃　していましたので、対応していなかったときのジャンプ先も準備しましょう。
＃
＃　内容が同じでバージョンが違う場合もあるかもしれないので、
＃　「内容＋バージョン」でジャンプさせるようにしましょう。
＃

＊OnKanadeTeaParty
＞お茶会のお菓子は（Ｒ２）（Ｒ０）
＞知らないお菓子だった

＊お茶会のお菓子はマカロン1
：（０）マカロン大好き！
いろんな味があって楽しいよね。

＊お茶会のお菓子はレアチーズケーキ1
：（０）このしっとり感…
たまらないね！

＊お茶会のお菓子はイチゴショート1
：（０）ケーキといえばやっぱりこれ！
うーん、美味しい！

＊お茶会のお菓子はアップルパイ1
：（０）美味しいな。
くだもののはいったお菓子って、どうしてこうも美味しいんだろう。

＊お茶会のお菓子はクリスマスケーキ1
：（０）メリークリスマス！
クリスマスケーキはいつものケーキとやっぱりひと味ちがうね。

＊お茶会のお菓子はさくらもち1
：（０）桜の香りが素敵なお菓子だね。
たとえ季節外れでもお花見気分。

＊お茶会のお菓子はわらびもち1
：（０）きなことくろみつ、もちろん両方かけちゃうもんね。
これが美味しくないはずが無いよね！

＊お茶会のお菓子はフレンチトースト1
：（０）パンとたまごだけなのに、こんなにふわふわでとろとろなんて…！

＊お茶会のお菓子はドーナツ1
：（０）私はこのお気に入りのフレンチクルーラー！
やっぱり美味しいな。

＊お茶会のお菓子はクッキー
：（０）じゃ、さっそくこの星のかたちのクッキーをもらっちゃうよ。
さくさくしてて美味しい！

＃
＃　バージョン１のそれぞれの組み合わせのトークができました。
＃　ここは作者さん次第に色々なことができると思います。
＃

＃
＃　次に対応していないお菓子のトークを作ります。
＃　（Ｒ１）の飲み物の名前や（Ｒ２）のお菓子の名前を組みあわせたりして、
＃　きちんとトークできるようにしましょう。
＃

＊知らないお菓子だった
：（０）美味しい…！
（Ｒ２）と（Ｒ１）って、やっぱりベストマッチだね。

＃
＃　ここまででお茶会に対応できました。
＃

＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃
＃　ステップ４
＃　お茶会にきちんと対応できたかどうか、デバッグ機能でチェックしましょう。
＃
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃

＃
＃　ステップ１〜３でお茶会に対応することができたわけですが、
＃　実際に動かしてきちんと動くかたしかめておきましょう。
＃
＃　お茶会は土曜日だけの限定イベントとなっていますが、
＃　作者さん向けの動作チェック機能を使っていつでも確認することができます。
＃

＃
＃　まずは「奏でる日常の音色」を起動して、SSPの機能の「開発用パレット」を起動します。
＃　右クリックメニューの「機能」の「開発用パレット」をクリックします。
＃　ない場合は「設定」の「本体設定」から「開発者機能を有効にする」必要があります。
＃
＃　次に開発者用パレットの「スクリプト入力」で、次の【】内の１文を入力してEnterを押します。
＃　【\![raise,OnKanadeTeaPartyDebug]】
＃

＃
＃　お茶会のデバッグ機能が開いたら、チェックしたい内容をクリックしてチェックできます。
＃　「バージョンチェックテスト」からはバージョンチェックイベントを起動して、
＃　正しくバージョン情報のやり取りができているかどうか確認することができます。
＃


