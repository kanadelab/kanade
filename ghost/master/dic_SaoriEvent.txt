＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃
＃　　　奏でる日常の音色　SAORIイベント処理　一時設定置き場
＃
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃


＃情報の自動更新手段を更新手段を設定で選択
＃更新しない＞確認時のみ
＃バックグラウンド更新＞一定時間放置で更新
＃毎時更新＞時間が変わる毎に更新


＃放置器 houchi,saori/houchi.dll

＊OnHouchi
＞処理終了	（Ｒ０）<１５
＞天気予報情報確認表示なしメイン	(（天気予報最終取得）!=（現在年）（現在月）（現在日）（現在時）||（weather,is_data,（天気予報データキー））==0)&&（天気予報自動受信設定）==操作してないとき
＞ニュース更新	（ニュース最終取得）!=（現在年）（現在月）（現在日）（現在時）&&（ニュース自動受信設定）==操作してないとき
＞バックグラウンドアップデート機能	（更新自動受信設定）==操作してないとき
＞天気予報情報確認表示なしサブ	(（天気予報最終取得）!=（現在年）（現在月）（現在日）（現在時）||（weather,is_data,（天気予報データキー））==0)&&（天気予報自動受信設定）==操作してないとき

＃ユーザが一定時間放置しているときに、自動で情報を取得する機能
＃ニュース、天気予報、アップデート
＃今は起動時にアップデートしか確認しないけど、天気予報とかも取っておいていいかも。
＊バックグラウンドアップデート機能
＞バックグラウンドアップデート開始	（自動更新確認）==有効&&（更新フラグ）==１
＞処理終了	（バックグラウンドアップデート日付）==（現在年）（現在月）（現在日）
＄アップデートチェックジャンプ先	バックグラウンドアップデート開始
＄アップデートチェック失敗ジャンプ先	バックグラウンドアップデート確認失敗
\0\![updatebymyself,checkonly]

＊バックグラウンドアップデート確認失敗
＄アップデートチェックジャンプ先	
＄アップデートチェック失敗ジャンプ先	
＄バックグラウンドアップデート日付	（現在年）（現在月）（現在日）
＄更新フラグ	２


＊バックグラウンドアップデート開始
＄バックグラウンドアップデート日付	（現在年）（現在月）（現在日）
＄更新フラグ	（when,（Ｒ０）!=none,１,０）
＞処理終了
＄アップデートチェックジャンプ先	
＄アップデートチェック失敗ジャンプ先	
\0\![updatebymyself]
